# [Method 2]Tower mass defined by section mass par unit length (kg/m)
# Maille de type : SEG2
# Mod√®le : DIS_T avec K_T_D_L et M_T_D_L


DEBUT(PAR_LOT='NON');

#------------------------------------------------------------------------
#                                 MAILLAGE
#------------------------------------------------------------------------
mesh=LIRE_MAILLAGE(FORMAT='MED', UNITE=20, INFO=2);
#MACR_INFO_MAIL(MAILLAGE=mail)
mesh=MODI_MAILLAGE(reuse=mesh, MAILLAGE=mesh,
                   ORIE_LIGNE=_F(GROUP_MA=('Tower'),),
                   INFO = 1,
                  );
# point = []
# for i in range(11):
#     point.append( _F(NOM_GROUP_MA='Node_'+str(i), GROUP_NO='Node_'+str(i)) )
#
# mesh=CREA_MAILLAGE(MAILLAGE=mail,
#                       CREA_POI1=point,);


#------------------------------------------------------------------------
#                                 MATERIAU
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#                                  MODELE
#------------------------------------------------------------------------    
mod=AFFE_MODELE(MAILLAGE=mesh,
                AFFE=(_F(GROUP_MA=('Tower'),
                         PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
                     ),);

#------------------------------------------------------------------------
#                        CARACTERISTIQUE DES ELEMENTS
#------------------------------------------------------------------------
# Mass = [5.5908700E+03,
# 5.2324300E+03,
# 4.8857600E+03,
# 4.5508700E+03,
# 4.2277500E+03,
# 3.9164100E+03,
# 3.6168300E+03,
# 3.3290300E+03,
# 3.0530100E+03,
# 2.7887500E+03,
# 2.5362700E+03]
#
# discret = []
# for i in range(len(Mass)-1):
#     massMatrix = [0]*21
#     massMatrix[0] = Mass[i]
#     massMatrix[2] = Mass[i]
#     massMatrix[5] = Mass[i]
#     massMatrix[9] = Mass[i+1]
#     massMatrix[14] = Mass[i+1]
#     massMatrix[20] = Mass[i+1]
#
#     discret.append(_F(GROUP_MA='Seg_'+str(i+1),
#                                 CARA='K_T_D_L',
#                                 REPERE='LOCAL',
#                                 VALE=(6.1434300E+11, 6.1434300E+11, 1),),
#                   )
#     discret.append(_F(GROUP_MA='Seg_'+str(i+1),
#                                 CARA='M_T_L',
#                                 REPERE='LOCAL',
#                                 VALE=massMatrix,),
#                   )


Mass = [2.3703027E+04,
2.2158836E+04,
2.0666220E+04,
1.9225178E+04,
1.7835710E+04,
1.6497796E+04,
1.5211433E+04,
1.3976668E+04,
1.2793454E+04,
1.1661794E+04]

discret = []
for i in range(len(Mass)):
    discret.append(_F(GROUP_MA='Seg_'+str(i+1),
                                CARA='K_T_D_L',
                                REPERE='LOCAL',
                                VALE=(6.1434300E+11, 6.1434300E+11, 1),),
                  )
    discret.append(_F(GROUP_MA='Seg_'+str(i+1),
                                CARA='M_T_D_L',
                                REPERE='LOCAL',
                                VALE=Mass[i],),
                  )
cara=AFFE_CARA_ELEM(MODELE=mod,
				    DISCRET=discret,
			       );

#------------------------------------------------------------------------
#                         CONDITIONS AUX LIMITES
#------------------------------------------------------------------------
# Type des appuis
ddl=AFFE_CHAR_MECA(MODELE=mod, VERI_NORM='NON',
		   		   DDL_IMPO=_F(GROUP_NO='Groupe_TwrRoot',
			       			   DX=0, DY=0, DZ=0),
                  );


#------------------------------------------------------------------------
#                              MODELISATION
#------------------------------------------------------------------------
# ==================== ANALYSE MODALE =====================
# Calculer les matrices de rigidite, de masse, d'amortissement
ASSEMBLAGE(MODELE=mod, CARA_ELEM=cara, #CHAM_MATER=mat,
           CHARGE=ddl,
           NUME_DDL=CO('numero'),
           MATR_ASSE=(_F(MATRICE=CO('matrAssM'), OPTION='MASS_MECA',),
           			  _F(MATRICE=CO('matrAssR'), OPTION='RIGI_MECA',),
		     		 ),);

# Calcul des modes propres
freq=CALC_MODES(MATR_RIGI=matrAssR, MATR_MASS=matrAssM, #MATR_AMOR=matrAssA,
				 SOLVEUR_MODAL=_F(METHODE='SORENSEN',
								 COEF_DIM_ESPACE=5,),
                 OPTION='CENTRE',
                 CALC_FREQ=_F(NMAX_FREQ=10,
							  FREQ=0.01,
				   			 ),
		         VERI_MODE=_F(STOP_ERREUR='NON',
				   	  		 ),
		     		 );


#------------------------------------------------------------------------
#                             DONNEES DE SORTIE
#------------------------------------------------------------------------
# Masse totale de la structure
masse=POST_ELEM(MODELE=mod, CARA_ELEM=cara, #CHAM_MATER=mat,
           		CHARGE=ddl,
				MASS_INER=_F(TOUT='OUI'),);

# ==================== TABLEAU DES RESULTATS =====================
# Masse
IMPR_TABLE(TABLE=masse,);

# Frequences propres
IMPR_RESU(RESU=_F(RESULTAT=freq,
		  		  NOM_PARA=('FREQ',
		  		  			'MASS_EFFE_DX','MASS_EFFE_DY','MASS_EFFE_DZ'),
		  		  TOUT_CHAM='OUI',
#                  NOM_CHAM='DEPL',
				 ),
	  	  INFO=1,);

# ==================== CARTE DES RESULTATS =====================
# IMPR_RESU(FORMAT='MED',
#       UNITE=80,
#       RESU=(_F(MAILLAGE=mesh,
#           RESULTAT=freq,
#           TOUT_CHAM='OUI',
#           #INST=1.0,
#           ),
#            ),);

FIN();

